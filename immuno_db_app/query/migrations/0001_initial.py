# Generated by Django 4.0.6 on 2022-08-15 14:06

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BiologicalMaterialTypes',
            fields=[
                ('biological_material_id', models.IntegerField(primary_key=True, serialize=False)),
                ('biological_material_name', models.TextField()),
            ],
            options={
                'db_table': 'biological_material_types',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BlogBlogposts',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=250)),
                ('url', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'blog_blogposts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataProcessing',
            fields=[
                ('data_processing_run_id', models.IntegerField(primary_key=True, serialize=False)),
                ('processing_software', models.TextField(blank=True, null=True)),
                ('processing_software_version', models.TextField(blank=True, null=True)),
                ('processing_pipeline', models.TextField(blank=True, null=True)),
                ('processing_pipeline_version', models.TextField(blank=True, null=True)),
                ('reference_proteome_version', models.TextField(blank=True, null=True)),
                ('search_engine', models.TextField(blank=True, null=True)),
                ('command_processing', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'data_processing',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DiseaseTypes',
            fields=[
                ('disease_id', models.CharField(max_length=7, primary_key=True, serialize=False)),
                ('disease_description', models.TextField()),
            ],
            options={
                'db_table': 'disease_types',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Donors',
            fields=[
                ('donor_id', models.TextField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'donors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HlaTypes',
            fields=[
                ('hla_id', models.IntegerField(primary_key=True, serialize=False)),
                ('hla_allele', models.TextField(unique=True)),
            ],
            options={
                'db_table': 'hla_types',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MassSpectrometers',
            fields=[
                ('mass_spectrometer_id', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('mass_spectrometer_name', models.TextField()),
            ],
            options={
                'db_table': 'mass_spectrometers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MsRuns',
            fields=[
                ('ms_run_id', models.IntegerField(primary_key=True, serialize=False)),
                ('biological_replicate_nr', models.SmallIntegerField()),
                ('technical_replicate_nr', models.SmallIntegerField()),
                ('date_of_measurement', models.DateField(blank=True, null=True)),
                ('mhc_class', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ms_runs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrganismTypes',
            fields=[
                ('ncbi_taxonomy_id', models.IntegerField(primary_key=True, serialize=False)),
                ('taxonomy_name', models.TextField(unique=True)),
            ],
            options={
                'db_table': 'organism_types',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('person_id', models.IntegerField(primary_key=True, serialize=False)),
                ('role', models.TextField()),
                ('first_name', models.TextField(blank=True, null=True)),
                ('last_name', models.TextField()),
            ],
            options={
                'db_table': 'people',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PeptideSpectrumMatches',
            fields=[
                ('psm_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('peptide_sequence', models.CharField(max_length=50)),
                ('retention_time', models.FloatField(blank=True, null=True)),
                ('mass_to_charge', models.FloatField(blank=True, null=True)),
                ('q_value', models.FloatField(blank=True, null=True)),
                ('charge', models.SmallIntegerField(blank=True, null=True)),
                ('search_identifier', models.TextField(blank=True, null=True)),
                ('spectrum_reference', models.TextField(blank=True, null=True)),
                ('ion_frac', models.FloatField(blank=True, null=True)),
                ('delt_cn', models.FloatField(blank=True, null=True)),
                ('delt_lcn', models.FloatField(blank=True, null=True)),
                ('percolator_score', models.FloatField(blank=True, null=True)),
                ('pep', models.FloatField(blank=True, null=True)),
                ('x_corr', models.FloatField(blank=True, null=True)),
                ('sp_score', models.FloatField(blank=True, null=True)),
                ('sp_rank', models.FloatField(blank=True, null=True)),
                ('expectation_value', models.FloatField(blank=True, null=True)),
                ('matched_ions', models.SmallIntegerField(blank=True, null=True)),
                ('total_ions', models.SmallIntegerField(blank=True, null=True)),
                ('num_matched_peptides', models.SmallIntegerField(blank=True, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('peptide_mass', models.FloatField(blank=True, null=True)),
                ('delta_mass', models.FloatField(blank=True, null=True)),
                ('is_best_spectrum', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'peptide_spectrum_matches',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PortfolioProject',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=250)),
                ('image', models.CharField(max_length=100)),
                ('url', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'portfolio_project',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('project_id', models.IntegerField(primary_key=True, serialize=False)),
                ('project_name', models.CharField(max_length=100)),
                ('project_description', models.TextField(blank=True, null=True)),
                ('qbic_project_id', models.CharField(max_length=5, unique=True)),
            ],
            options={
                'db_table': 'projects',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Proteins',
            fields=[
                ('uniprot_id', models.TextField(primary_key=True, serialize=False)),
                ('protein_name', models.TextField()),
            ],
            options={
                'db_table': 'proteins',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samples',
            fields=[
                ('sample_id', models.IntegerField(primary_key=True, serialize=False)),
                ('qbic_sample_id', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('dignity', models.TextField(blank=True, null=True)),
                ('date_of_sample_acquisition', models.DateField(blank=True, null=True)),
                ('is_metastasis', models.BooleanField(blank=True, null=True)),
                ('is_cell_line', models.BooleanField(blank=True, null=True)),
                ('treatment', models.TextField(blank=True, null=True)),
                ('sample_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'samples',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BindingPredictions',
            fields=[
                ('psm', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='query.peptidespectrummatches')),
                ('hla_id', models.IntegerField()),
                ('prediction_tool', models.TextField()),
                ('prediction_tool_version', models.TextField()),
                ('is_binder', models.BooleanField(blank=True, null=True)),
                ('affinity_score', models.FloatField(blank=True, null=True)),
                ('affinity_rank', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'binding_predictions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DonorHla',
            fields=[
                ('donor', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='query.donors')),
            ],
            options={
                'db_table': 'donor_hla',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PeptideModifications',
            fields=[
                ('psm', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='query.peptidespectrummatches')),
                ('amino_acid_position', models.SmallIntegerField()),
                ('modification_type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'peptide_modifications',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PeptideProteinMatches',
            fields=[
                ('psm', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='query.peptidespectrummatches')),
            ],
            options={
                'db_table': 'peptide_protein_matches',
                'managed': False,
            },
        ),
    ]
